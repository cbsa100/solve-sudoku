{"version":3,"sources":["components/Header.js","components/Cell.js","components/Grid.js","App.js","index.js"],"names":["Header","Cell","useState","amount","setAmount","className","type","name","min","max","value","onChange","e","target","length","slice","Grid","solveSudoku","Array","from","map","_","index","onClick","App","line_to_board","list_","list","board","line","forEach","x","push","check_box","y","cb_bl","n","cb_board","i","valid_solution","no_zeros","list_to_check","sort","includes","shift","removeDuplicates","arr","filter","array","indexOf","vs_board","lx","rx","block","row","nz_line","j","nz_row","nz_block","allInputs","document","querySelectorAll","ele","Number","finalArr","_board_line","board_line","los","first_missing","cb_return","Math","floor","to_continue","pop","solver","alert","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60c37f90.chunk.js","sourcesContent":["const Header = () => {\r\n  return (\r\n    <header>\r\n      <h2>Solve Sudoku!</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useState } from 'react';\r\n\r\nconst Cell = () => {\r\n  const [amount, setAmount] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    setAmount(e.target.value);\r\n    if (e.target.value.length > 1) {\r\n      setAmount(e.target.value.slice(0, 1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='cell'>\r\n      <input\r\n        type='number'\r\n        className='cell-input'\r\n        name='cell_input'\r\n        min='1'\r\n        max='9'\r\n        value={amount}\r\n        onChange={onChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Cell;\r\n","import Cell from './Cell';\r\n\r\nconst Grid = ({ solveSudoku }) => {\r\n  return (\r\n    <>\r\n      <div className='grid-container'>\r\n        <div className='grid'>\r\n          {Array.from({ length: 81 }).map((_, index) => (\r\n            <Cell key={index} />\r\n          ))}\r\n        </div>\r\n        <button onClick={solveSudoku} className='btn btn-solve'>\r\n          solve\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import Header from './components/Header';\nimport Grid from './components/Grid';\n\nconst App = () => {\n    // function board_to_line(list) {\n    //   let board = []\n    //   if (list.length === 9) {\n    //     list.forEach(i => { board.push(i) })\n    //     return board\n    //   }\n\n    //   else {\n    //     return list\n    //   }\n    // }\n    function line_to_board(list_) {\n        let list = [...list_];\n        let board = [];\n        if (list.length === 81) {\n            let line = [];\n            list.forEach((x) => {\n                line.push(x);\n                if (line.length % 9 === 0) {\n                    board.push(line);\n                    line = [];\n                }\n            });\n            return board;\n        } else {\n            return list;\n        }\n    }\n    function check_box(x, y, cb_bl, n) {\n        let cb_board = line_to_board(cb_bl);\n        for (let i = n; i < 10; i++) {\n            cb_board[x][y] = i;\n            if (valid_solution(cb_board)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    function no_zeros(list_to_check) {\n        // removes all zeros from list\"\n        list_to_check.sort();\n        while (list_to_check.includes(0)) {\n            list_to_check.shift();\n        }\n        return list_to_check;\n    }\n    function removeDuplicates(arr) {\n        var returnarr = [];\n        returnarr = arr.filter(\n            (value, index, array) => array.indexOf(value) === index\n        );\n        return returnarr;\n    }\n    function valid_solution(vs_board) {\n        //check if current board is ok\n        let lx = 0,\n            rx = 0;\n        let block = [];\n        for (let i = 0; i < 9; i++) {\n            // checks for lines and rows\n            let row = [];\n            var nz_line = no_zeros([...vs_board[i]]);\n            if (nz_line.length !== removeDuplicates(nz_line).length) {\n                return false;\n            }\n            for (let j = 0; j < 9; j++) {\n                row.push(vs_board[j][i]);\n            }\n            var nz_row = no_zeros([...row]);\n            if (nz_row.length !== removeDuplicates(nz_row).length) {\n                return false;\n            }\n        }\n\n        while (lx < 8) {\n            rx = 0;\n            while (rx < 8) {\n                for (let i = lx; i < lx + 3; i++) {\n                    for (let j = rx; j < rx + 3; j++) {\n                        block.push(vs_board[i][j]);\n                    }\n                }\n                rx += 3;\n                let nz_block = no_zeros([...block]);\n                if (nz_block.length !== removeDuplicates(nz_block).length) {\n                    return false;\n                }\n                block = [];\n            }\n            lx += 3;\n        }\n        return true;\n    }\n    const solver = (_board_line) => {\n        let board_line = [..._board_line];\n        let los = [];\n        let n = 1;\n        while (board_line.includes(0) === true) {\n            let first_missing = board_line.indexOf(0);\n            let cb_return = check_box(\n                Math.floor(first_missing / 9),\n                first_missing % 9,\n                board_line,\n                n\n            );\n            n = 1;\n            if (cb_return === -1) {\n                let to_continue = true;\n                while (to_continue) {\n                    if (los.length === 0) {\n                        return 'unsolvable';\n                    }\n                    if (los[los.length - 1][0] === 9) {\n                        board_line[los[los.length - 1][1]] = 0;\n                        los.pop();\n                    } else {\n                        board_line[los[los.length - 1][1]] = 0;\n                        n = los[los.length - 1][0] + 1;\n                        los.pop();\n                        to_continue = false;\n                    }\n                }\n            } else {\n                los.push([cb_return, first_missing]);\n                board_line[first_missing] = cb_return;\n            }\n        }\n        return valid_solution(line_to_board(board_line))\n            ? board_line\n            : 'unsolvable';\n    };\n\n    const solveSudoku = () => {\n        var arr = [];\n        var allInputs = document.querySelectorAll('.cell-input');\n        allInputs.forEach((ele) =>\n            ele.value === '' ? arr.push(0) : arr.push(Number(ele.value))\n        );\n        var finalArr = solver(arr);\n        if (finalArr === 'unsolvable') {\n            alert('this sudoku is unsolvable');\n            for (let i = 0; i < 81; i++) {\n                allInputs[i].value = null;\n            }\n        } else {\n            for (let i = 0; i < 81; i++) {\n                allInputs[i].value = finalArr[i];\n            }\n        }\n    };\n    return (\n        <div className='container'>\n            <Header />\n            <Grid solveSudoku={solveSudoku} />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}